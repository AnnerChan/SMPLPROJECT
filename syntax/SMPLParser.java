
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 03 12:52:55 EST 2018
//----------------------------------------------------

package smpl.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 03 12:52:55 EST 2018
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\011\007\000\002\031\010\000\002\035\006" +
    "\000\002\025\006\000\002\025\005\000\002\025\003\000" +
    "\002\033\006\000\002\032\006\000\002\015\012\000\002" +
    "\026\010\000\002\027\006\000\002\030\005\000\002\016" +
    "\010\000\002\013\006\000\002\014\006\000\002\017\005" +
    "\000\002\020\005\000\002\023\005\000\002\021\004\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\010\003\000\002\010\003\000\002\007\005\000\002\007" +
    "\003\000\002\006\011\000\002\006\011\000\002\006\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\004\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\041\005\000\002\041\003" +
    "\000\002\042\005\000\002\042\003\000\002\043\004\000" +
    "\002\043\003\000\002\044\005\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\054" +
    "\002\000\002\044\007\000\002\046\005\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\047\005\000" +
    "\002\047\003\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\003\000\002\050\004\000\002\050" +
    "\003\000\002\051\005\000\002\051\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\005\000\002\052\003\000" +
    "\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\022\034\016\051\025\052\020\057\027\062" +
    "\026\063\022\066\007\100\006\001\002\000\040\002\uffd0" +
    "\005\uffd0\007\uffd0\012\uffd0\014\uffd0\034\uffd0\051\uffd0\052" +
    "\uffd0\057\uffd0\062\uffd0\063\uffd0\066\uffd0\067\uffd0\070\uffd0" +
    "\100\uffd0\001\002\000\004\014\302\001\002\000\006\012" +
    "\146\013\uffd8\001\002\000\022\034\016\051\025\052\020" +
    "\057\027\062\026\063\022\066\007\100\006\001\002\000" +
    "\004\002\271\001\002\000\044\002\uffc8\005\uffc8\007\uffc8" +
    "\012\uffc8\014\uffc8\034\uffc8\035\267\036\uffc8\051\uffc8\052" +
    "\uffc8\057\uffc8\062\uffc8\063\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\100\uffc8\001\002\000\042\002\uffd1\005\uffd1\007\uffd1\012" +
    "\uffd1\014\uffd1\034\uffd1\036\265\051\uffd1\052\uffd1\057\uffd1" +
    "\062\uffd1\063\uffd1\066\uffd1\067\uffd1\070\uffd1\100\uffd1\001" +
    "\002\000\040\002\uffcc\005\uffcc\007\uffcc\012\uffcc\014\uffcc" +
    "\034\uffcc\051\uffcc\052\uffcc\057\uffcc\062\uffcc\063\uffcc\066" +
    "\uffcc\067\uffcc\070\uffcc\100\uffcc\001\002\000\040\002\ufffd" +
    "\005\ufffd\007\ufffd\012\ufffd\014\ufffd\034\ufffd\051\ufffd\052" +
    "\ufffd\057\ufffd\062\ufffd\063\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\100\ufffd\001\002\000\040\002\uffcf\005\uffcf\007\uffcf\012" +
    "\uffcf\014\uffcf\034\uffcf\051\uffcf\052\uffcf\057\uffcf\062\uffcf" +
    "\063\uffcf\066\uffcf\067\uffcf\070\uffcf\100\uffcf\001\002\000" +
    "\002\001\002\000\040\002\uffcb\005\uffcb\007\uffcb\012\uffcb" +
    "\014\uffcb\034\uffcb\051\uffcb\052\uffcb\057\uffcb\062\uffcb\063" +
    "\uffcb\066\uffcb\067\uffcb\070\uffcb\100\uffcb\001\002\000\004" +
    "\004\261\001\002\000\044\002\uffc6\005\uffc6\007\uffc6\012" +
    "\uffc6\014\uffc6\034\uffc6\035\uffc6\036\uffc6\051\uffc6\052\uffc6" +
    "\057\uffc6\062\uffc6\063\uffc6\066\uffc6\067\uffc6\070\uffc6\100" +
    "\uffc6\001\002\000\004\100\256\001\002\000\004\013\253" +
    "\001\002\000\040\002\uffcd\005\uffcd\007\uffcd\012\uffcd\014" +
    "\uffcd\034\uffcd\051\uffcd\052\uffcd\057\uffcd\062\uffcd\063\uffcd" +
    "\066\uffcd\067\uffcd\070\uffcd\100\uffcd\001\002\000\004\004" +
    "\250\001\002\000\004\006\232\001\002\000\006\004\216" +
    "\100\145\001\002\000\060\002\uffc4\005\uffc4\007\uffc4\012" +
    "\uffc4\014\uffc4\034\uffc4\035\uffc4\036\uffc4\037\036\040\042" +
    "\041\040\042\035\043\037\044\041\051\uffc4\052\uffc4\057" +
    "\uffc4\062\uffc4\063\uffc4\066\uffc4\067\uffc4\070\uffc4\100\uffc4" +
    "\001\002\000\040\002\ufffe\005\ufffe\007\ufffe\012\ufffe\014" +
    "\ufffe\034\ufffe\051\ufffe\052\ufffe\057\ufffe\062\ufffe\063\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\100\ufffe\001\002\000\040\002" +
    "\uffca\005\uffca\007\uffca\012\uffca\014\uffca\034\uffca\051\uffca" +
    "\052\uffca\057\uffca\062\uffca\063\uffca\066\uffca\067\uffca\070" +
    "\uffca\100\uffca\001\002\000\024\002\001\034\016\051\025" +
    "\052\020\057\027\062\026\063\022\066\007\100\006\001" +
    "\002\000\040\002\uffff\005\uffff\007\uffff\012\uffff\014\uffff" +
    "\034\uffff\051\uffff\052\uffff\057\uffff\062\uffff\063\uffff\066" +
    "\uffff\067\uffff\070\uffff\100\uffff\001\002\000\134\002\uffaa" +
    "\004\062\005\uffaa\006\064\007\uffaa\012\uffaa\014\uffaa\016" +
    "\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046\074" +
    "\047\067\050\070\051\uffaa\052\uffaa\053\044\054\105\055" +
    "\052\056\047\057\uffaa\060\053\061\043\062\uffaa\063\uffaa" +
    "\066\uffaa\067\uffaa\070\uffaa\076\102\100\057\001\002\000" +
    "\134\002\uffaa\004\062\005\uffaa\006\064\007\uffaa\012\uffaa" +
    "\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\031\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\046\074\047\067\050\070\051\uffaa\052\uffaa\053\044" +
    "\054\105\055\052\056\047\057\uffaa\060\053\061\043\062" +
    "\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100\057" +
    "\001\002\000\134\002\uffaa\004\062\005\uffaa\006\064\007" +
    "\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\045\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\046\074\047\067\050\070\051\uffaa\052" +
    "\uffaa\053\044\054\105\055\052\056\047\057\uffaa\060\053" +
    "\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076" +
    "\102\100\057\001\002\000\134\002\uffaa\004\062\005\uffaa" +
    "\006\064\007\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa" +
    "\033\045\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\046\074\047\067\050\070" +
    "\051\uffaa\052\uffaa\053\044\054\105\055\052\056\047\057" +
    "\uffaa\060\053\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\076\102\100\057\001\002\000\134\002\uffaa\004" +
    "\062\005\uffaa\006\064\007\uffaa\012\uffaa\014\uffaa\016\055" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031" +
    "\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046\074\047" +
    "\067\050\070\051\uffaa\052\uffaa\053\044\054\105\055\052" +
    "\056\047\057\uffaa\060\053\061\043\062\uffaa\063\uffaa\066" +
    "\uffaa\067\uffaa\070\uffaa\076\102\100\057\001\002\000\134" +
    "\002\uffaa\004\062\005\uffaa\006\064\007\uffaa\012\uffaa\014" +
    "\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\031\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\046\074\047\067\050\070\051\uffaa\052\uffaa\053\044\054" +
    "\105\055\052\056\047\057\uffaa\060\053\061\043\062\uffaa" +
    "\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100\057\001" +
    "\002\000\004\004\203\001\002\000\004\004\201\001\002" +
    "\000\134\002\uffaa\004\062\005\uffaa\006\064\007\uffaa\012" +
    "\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\046\074\047\067\050\070\051\uffaa\052\uffaa\053" +
    "\044\054\105\055\052\056\047\057\uffaa\060\053\061\043" +
    "\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100" +
    "\057\001\002\000\134\002\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\012\uffab\014\uffab\016\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060" +
    "\uffab\061\uffab\062\uffab\063\uffab\066\uffab\067\uffab\070\uffab" +
    "\076\uffab\100\uffab\001\002\000\004\004\171\001\002\000" +
    "\134\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\012\ufff4" +
    "\014\ufff4\016\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\066\ufff4\067\ufff4\070\ufff4\076\ufff4\100\ufff4" +
    "\001\002\000\134\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\066\ufffb\067\ufffb\070\ufffb\076" +
    "\ufffb\100\ufffb\001\002\000\004\004\166\001\002\000\004" +
    "\004\161\001\002\000\134\002\uffb3\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\012\uffb3\014\uffb3\016\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\076\uffb3\100\uffb3\001\002\000\006\017\uffaa\100\145" +
    "\001\002\000\134\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\012\ufff2\014\ufff2\016\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\066\ufff2\067\ufff2\070\ufff2\076" +
    "\ufff2\100\ufff2\001\002\000\134\002\uffad\004\uffad\005\uffad" +
    "\006\uffad\007\uffad\012\uffad\014\uffad\016\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041" +
    "\uffad\042\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\066\uffad\067\uffad" +
    "\070\uffad\076\uffad\100\uffad\001\002\000\134\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\012\ufffa\014\ufffa\016\ufffa" +
    "\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\076\ufffa\100\ufffa\001\002\000\064" +
    "\002\uffc3\005\uffc3\007\uffc3\012\uffc3\014\uffc3\031\153\032" +
    "\154\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\051\uffc3\052\uffc3\057\uffc3\062" +
    "\uffc3\063\uffc3\066\uffc3\067\uffc3\070\uffc3\100\uffc3\001\002" +
    "\000\022\034\016\051\025\052\020\057\027\062\026\063" +
    "\022\066\007\100\006\001\002\000\134\002\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\012\ufff9\014\ufff9\016\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\076\ufff9\100\ufff9\001\002\000\006\007" +
    "\uffaa\100\145\001\002\000\134\002\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\012\uffb1\014\uffb1\016\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\066\uffb1\067\uffb1" +
    "\070\uffb1\076\uffb1\100\uffb1\001\002\000\134\002\uffec\004" +
    "\uffec\005\uffec\006\uffec\007\uffec\012\uffec\014\uffec\016\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec\047" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec\066" +
    "\uffec\067\uffec\070\uffec\076\uffec\100\uffec\001\002\000\004" +
    "\004\137\001\002\000\004\004\134\001\002\000\134\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\014\ufffc" +
    "\016\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\046" +
    "\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\076\ufffc\100\ufffc\001\002" +
    "\000\134\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\012" +
    "\uffaf\014\uffaf\016\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\132\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\066\uffaf\067\uffaf\070\uffaf\076\uffaf\100" +
    "\uffaf\001\002\000\134\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\012\ufff7\014\ufff7\016\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\066\ufff7\067\ufff7\070\ufff7" +
    "\076\ufff7\100\ufff7\001\002\000\004\004\127\001\002\000" +
    "\134\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\012\uffb7" +
    "\014\uffb7\016\uffb7\022\uffb7\023\uffb7\024\114\025\115\026" +
    "\113\027\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\066\uffb7\067\uffb7\070\uffb7\076\uffb7\100\uffb7" +
    "\001\002\000\004\004\122\001\002\000\134\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\012\ufff5\014\ufff5\016\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\076\ufff5\100\ufff5\001\002\000\134" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\012\ufff3\014" +
    "\ufff3\016\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\066\ufff3\067\ufff3\070\ufff3\076\ufff3\100\ufff3\001" +
    "\002\000\134\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\012\uffba\014\uffba\016\uffba\022\110\023\111\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061" +
    "\uffba\062\uffba\063\uffba\066\uffba\067\uffba\070\uffba\076\uffba" +
    "\100\uffba\001\002\000\134\002\uffae\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\012\uffae\014\uffae\016\uffae\022\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\062\uffae\063\uffae\066\uffae\067\uffae\070" +
    "\uffae\076\uffae\100\uffae\001\002\000\134\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\012\ufff8\014\ufff8\016\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\076\ufff8\100\ufff8\001\002\000\134\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014\ufff6" +
    "\016\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\066\ufff6\067\ufff6\070\ufff6\076\ufff6\100\ufff6\001\002" +
    "\000\004\004\106\001\002\000\004\005\107\001\002\000" +
    "\134\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1" +
    "\014\uffe1\016\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\066\uffe1\067\uffe1\070\uffe1\076\uffe1\100\uffe1" +
    "\001\002\000\134\002\uffaa\004\062\005\uffaa\006\064\007" +
    "\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\045\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\046\074\047\067\050\070\051\uffaa\052" +
    "\uffaa\053\044\054\105\055\052\056\047\057\uffaa\060\053" +
    "\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076" +
    "\102\100\057\001\002\000\134\002\uffaa\004\062\005\uffaa" +
    "\006\064\007\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa" +
    "\033\045\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\046\074\047\067\050\070" +
    "\051\uffaa\052\uffaa\053\044\054\105\055\052\056\047\057" +
    "\uffaa\060\053\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\076\102\100\057\001\002\000\134\002\uffb8\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\012\uffb8\014\uffb8\016\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\031" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\066" +
    "\uffb8\067\uffb8\070\uffb8\076\uffb8\100\uffb8\001\002\000\134" +
    "\002\uffaa\004\062\005\uffaa\006\064\007\uffaa\012\uffaa\014" +
    "\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa" +
    "\027\uffaa\031\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\046\074\047\067\050\070\051\uffaa\052\uffaa\053\044\054" +
    "\105\055\052\056\047\057\uffaa\060\053\061\043\062\uffaa" +
    "\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100\057\001" +
    "\002\000\134\002\uffaa\004\062\005\uffaa\006\064\007\uffaa" +
    "\012\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\045\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\046\074\047\067\050\070\051\uffaa\052\uffaa" +
    "\053\044\054\105\055\052\056\047\057\uffaa\060\053\061" +
    "\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102" +
    "\100\057\001\002\000\134\002\uffaa\004\062\005\uffaa\006" +
    "\064\007\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033" +
    "\045\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\046\074\047\067\050\070\051" +
    "\uffaa\052\uffaa\053\044\054\105\055\052\056\047\057\uffaa" +
    "\060\053\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\076\102\100\057\001\002\000\134\002\uffb5\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\012\uffb5\014\uffb5\016\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\066\uffb5" +
    "\067\uffb5\070\uffb5\076\uffb5\100\uffb5\001\002\000\134\002" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\012\uffb6\014\uffb6" +
    "\016\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\066\uffb6\067\uffb6\070\uffb6\076\uffb6\100\uffb6\001\002" +
    "\000\134\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\012" +
    "\uffb4\014\uffb4\016\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\066\uffb4\067\uffb4\070\uffb4\076\uffb4\100" +
    "\uffb4\001\002\000\134\002\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\012\uffb9\014\uffb9\016\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\076\uffb9\100\uffb9\001\002\000\022\034\016\051\025\052" +
    "\020\057\027\062\026\063\022\066\007\100\006\001\002" +
    "\000\004\012\124\001\002\000\022\034\016\051\025\052" +
    "\020\057\027\062\026\063\022\066\007\100\006\001\002" +
    "\000\004\005\126\001\002\000\134\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\012\ufff0\014\ufff0\016\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\076\ufff0\100\ufff0\001\002\000\022\034\016" +
    "\051\025\052\020\057\027\062\026\063\022\066\007\100" +
    "\006\001\002\000\004\005\131\001\002\000\134\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\012\uffef\014\uffef\016" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef" +
    "\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\066\uffef\067\uffef\070\uffef\076\uffef\100\uffef\001\002\000" +
    "\134\002\uffaa\004\062\005\uffaa\006\064\007\uffaa\012\uffaa" +
    "\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\046\074\047\067\050\070\051\uffaa\052\uffaa\053\044" +
    "\054\105\055\052\056\047\057\uffaa\060\053\061\043\062" +
    "\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100\057" +
    "\001\002\000\134\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\012\uffb0\014\uffb0\016\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\066\uffb0\067\uffb0\070\uffb0\076" +
    "\uffb0\100\uffb0\001\002\000\022\034\016\051\025\052\020" +
    "\057\027\062\026\063\022\066\007\100\006\001\002\000" +
    "\004\005\136\001\002\000\134\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\012\uffea\014\uffea\016\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\066\uffea\067\uffea" +
    "\070\uffea\076\uffea\100\uffea\001\002\000\022\034\016\051" +
    "\025\052\020\057\027\062\026\063\022\066\007\100\006" +
    "\001\002\000\004\005\141\001\002\000\134\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\012\uffeb\014\uffeb\016\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\076\uffeb\100\uffeb\001\002\000\010" +
    "\005\uffdb\007\uffdb\017\uffdb\001\002\000\010\005\uffda\007" +
    "\uffda\017\uffda\001\002\000\004\007\150\001\002\000\016" +
    "\005\uffd8\007\uffd8\012\146\013\uffd8\015\uffd8\017\uffd8\001" +
    "\002\000\004\100\145\001\002\000\014\005\uffd9\007\uffd9" +
    "\013\uffd9\015\uffd9\017\uffd9\001\002\000\134\002\uffed\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\012\uffed\014\uffed\016\uffed" +
    "\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\066" +
    "\uffed\067\uffed\070\uffed\076\uffed\100\uffed\001\002\000\004" +
    "\005\152\001\002\000\134\002\uffac\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\012\uffac\014\uffac\016\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\062\uffac\063\uffac\066\uffac\067\uffac\070" +
    "\uffac\076\uffac\100\uffac\001\002\000\134\002\uffaa\004\062" +
    "\005\uffaa\006\064\007\uffaa\012\uffaa\014\uffaa\016\055\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\031\uffaa" +
    "\032\uffaa\033\045\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046\074\047\067" +
    "\050\070\051\uffaa\052\uffaa\053\044\054\105\055\052\056" +
    "\047\057\uffaa\060\053\061\043\062\uffaa\063\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\076\102\100\057\001\002\000\134\002" +
    "\uffaa\004\062\005\uffaa\006\064\007\uffaa\012\uffaa\014\uffaa" +
    "\016\055\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\031\uffaa\032\uffaa\033\045\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\046" +
    "\074\047\067\050\070\051\uffaa\052\uffaa\053\044\054\105" +
    "\055\052\056\047\057\uffaa\060\053\061\043\062\uffaa\063" +
    "\uffaa\066\uffaa\067\uffaa\070\uffaa\076\102\100\057\001\002" +
    "\000\134\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\012" +
    "\uffbb\014\uffbb\016\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\066\uffbb\067\uffbb\070\uffbb\076\uffbb\100" +
    "\uffbb\001\002\000\134\002\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\012\uffbc\014\uffbc\016\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\066\uffbc\067\uffbc\070\uffbc" +
    "\076\uffbc\100\uffbc\001\002\000\004\017\160\001\002\000" +
    "\134\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6" +
    "\014\uffe6\016\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\076\uffe6\100\uffe6" +
    "\001\002\000\004\057\027\001\002\000\004\012\163\001" +
    "\002\000\004\100\145\001\002\000\004\005\165\001\002" +
    "\000\134\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012" +
    "\uffe8\014\uffe8\016\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\uffe8\066\uffe8\067\uffe8\070\uffe8\076\uffe8\100" +
    "\uffe8\001\002\000\006\005\uffaa\100\145\001\002\000\004" +
    "\005\170\001\002\000\134\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\012\uffee\014\uffee\016\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\066\uffee\067\uffee\070" +
    "\uffee\076\uffee\100\uffee\001\002\000\022\034\016\051\025" +
    "\052\020\057\027\062\026\063\022\066\007\100\006\001" +
    "\002\000\004\012\173\001\002\000\022\034\016\051\025" +
    "\052\020\057\027\062\026\063\022\066\007\100\006\001" +
    "\002\000\004\012\175\001\002\000\022\034\016\051\025" +
    "\052\020\057\027\062\026\063\022\066\007\100\006\001" +
    "\002\000\004\005\177\001\002\000\134\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\012\uffe9\014\uffe9\016\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\066\uffe9" +
    "\067\uffe9\070\uffe9\076\uffe9\100\uffe9\001\002\000\134\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\012\uffb2\014\uffb2" +
    "\016\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\066\uffb2\067\uffb2\070\uffb2\076\uffb2\100\uffb2\001\002" +
    "\000\004\005\202\001\002\000\134\002\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\012\uffe2\014\uffe2\016\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\076\uffe2\100\uffe2\001\002\000\022\034\016" +
    "\051\025\052\020\057\027\062\026\063\022\066\007\100" +
    "\006\001\002\000\004\005\205\001\002\000\134\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\014\uffe7\016" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\076\uffe7\100\uffe7\001\002\000" +
    "\134\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\012\uffbe" +
    "\014\uffbe\016\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\031\153\032\154\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\066\uffbe\067\uffbe\070\uffbe\076\uffbe\100\uffbe" +
    "\001\002\000\134\002\uffaa\004\062\005\uffaa\006\064\007" +
    "\uffaa\012\uffaa\014\uffaa\016\055\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa\033\045\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\046\074\047\067\050\070\051\uffaa\052" +
    "\uffaa\053\044\054\105\055\052\056\047\057\uffaa\060\053" +
    "\061\043\062\uffaa\063\uffaa\066\uffaa\067\uffaa\070\uffaa\076" +
    "\102\100\057\001\002\000\064\002\uffbd\005\uffbd\007\uffbd" +
    "\012\uffbd\014\uffbd\031\153\032\154\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\051\uffbd\052\uffbd\057\uffbd\062\uffbd\063\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\100\uffbd\001\002\000\064\002\uffc2\005\uffc2" +
    "\007\uffc2\012\uffc2\014\uffc2\031\153\032\154\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2" +
    "\044\uffc2\051\uffc2\052\uffc2\057\uffc2\062\uffc2\063\uffc2\066" +
    "\uffc2\067\uffc2\070\uffc2\100\uffc2\001\002\000\064\002\uffc0" +
    "\005\uffc0\007\uffc0\012\uffc0\014\uffc0\031\153\032\154\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\051\uffc0\052\uffc0\057\uffc0\062\uffc0\063" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\100\uffc0\001\002\000\064" +
    "\002\uffc1\005\uffc1\007\uffc1\012\uffc1\014\uffc1\031\153\032" +
    "\154\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\043\uffc1\044\uffc1\051\uffc1\052\uffc1\057\uffc1\062" +
    "\uffc1\063\uffc1\066\uffc1\067\uffc1\070\uffc1\100\uffc1\001\002" +
    "\000\064\002\uffbf\005\uffbf\007\uffbf\012\uffbf\014\uffbf\031" +
    "\153\032\154\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\051\uffbf\052\uffbf\057" +
    "\uffbf\062\uffbf\063\uffbf\066\uffbf\067\uffbf\070\uffbf\100\uffbf" +
    "\001\002\000\002\001\002\000\006\006\217\100\145\001" +
    "\002\000\004\100\145\001\002\000\004\015\221\001\002" +
    "\000\006\005\uffaa\100\145\001\002\000\004\005\223\001" +
    "\002\000\002\001\002\000\040\002\uffd6\005\uffd6\007\uffd6" +
    "\012\uffd6\014\uffd6\034\uffd6\051\uffd6\052\uffd6\057\uffd6\062" +
    "\uffd6\063\uffd6\066\uffd6\067\uffd6\070\uffd6\100\uffd6\001\002" +
    "\000\004\007\226\001\002\000\004\005\227\001\002\000" +
    "\002\001\002\000\040\002\uffd7\005\uffd7\007\uffd7\012\uffd7" +
    "\014\uffd7\034\uffd7\051\uffd7\052\uffd7\057\uffd7\062\uffd7\063" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\100\uffd7\001\002\000\040" +
    "\002\uffd5\005\uffd5\007\uffd5\012\uffd5\014\uffd5\034\uffd5\051" +
    "\uffd5\052\uffd5\057\uffd5\062\uffd5\063\uffd5\066\uffd5\067\uffd5" +
    "\070\uffd5\100\uffd5\001\002\000\006\007\uffaa\100\236\001" +
    "\002\000\004\007\uffde\001\002\000\006\007\uffaa\012\243" +
    "\001\002\000\004\007\241\001\002\000\004\030\237\001" +
    "\002\000\022\034\016\051\025\052\020\057\027\062\026" +
    "\063\022\066\007\100\006\001\002\000\006\007\uffe0\012" +
    "\uffe0\001\002\000\022\034\016\051\025\052\020\057\027" +
    "\062\026\063\022\066\007\100\006\001\002\000\040\002" +
    "\ufff1\005\ufff1\007\ufff1\012\ufff1\014\ufff1\034\016\051\025" +
    "\052\020\057\027\062\026\063\022\066\007\067\ufff1\070" +
    "\ufff1\100\006\001\002\000\004\100\236\001\002\000\004" +
    "\007\uffdc\001\002\000\004\007\uffdf\001\002\000\006\007" +
    "\uffaa\012\243\001\002\000\004\007\uffdd\001\002\000\002" +
    "\001\002\000\004\005\252\001\002\000\040\002\uffe4\005" +
    "\uffe4\007\uffe4\012\uffe4\014\uffe4\034\uffe4\051\uffe4\052\uffe4" +
    "\057\uffe4\062\uffe4\063\uffe4\066\uffe4\067\uffe4\070\uffe4\100" +
    "\uffe4\001\002\000\004\030\254\001\002\000\022\034\016" +
    "\051\025\052\020\057\027\062\026\063\022\066\007\100" +
    "\006\001\002\000\004\014\uffd2\001\002\000\004\030\257" +
    "\001\002\000\022\034\016\051\025\052\020\057\027\062" +
    "\026\063\022\066\007\100\006\001\002\000\004\014\uffd4" +
    "\001\002\000\002\001\002\000\004\005\263\001\002\000" +
    "\040\002\uffe3\005\uffe3\007\uffe3\012\uffe3\014\uffe3\034\uffe3" +
    "\051\uffe3\052\uffe3\057\uffe3\062\uffe3\063\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\100\uffe3\001\002\000\060\002\uffc5\005\uffc5" +
    "\007\uffc5\012\uffc5\014\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\036\040\042\041\040\042\035\043\037\044\041\051\uffc5" +
    "\052\uffc5\057\uffc5\062\uffc5\063\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\100\uffc5\001\002\000\004\034\016\001\002\000\044" +
    "\002\uffc9\005\uffc9\007\uffc9\012\uffc9\014\uffc9\034\uffc9\035" +
    "\267\036\uffc9\051\uffc9\052\uffc9\057\uffc9\062\uffc9\063\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\100\uffc9\001\002\000\004\034" +
    "\016\001\002\000\044\002\uffc7\005\uffc7\007\uffc7\012\uffc7" +
    "\014\uffc7\034\uffc7\035\uffc7\036\uffc7\051\uffc7\052\uffc7\057" +
    "\uffc7\062\uffc7\063\uffc7\066\uffc7\067\uffc7\070\uffc7\100\uffc7" +
    "\001\002\000\004\002\000\001\002\000\004\067\273\001" +
    "\002\000\022\034\016\051\025\052\020\057\027\062\026" +
    "\063\022\066\007\100\006\001\002\000\004\070\275\001" +
    "\002\000\022\034\016\051\025\052\020\057\027\062\026" +
    "\063\022\066\007\100\006\001\002\000\040\002\uffe5\005" +
    "\uffe5\007\uffe5\012\uffe5\014\uffe5\034\uffe5\051\uffe5\052\uffe5" +
    "\057\uffe5\062\uffe5\063\uffe5\066\uffe5\067\uffe5\070\uffe5\100" +
    "\uffe5\001\002\000\004\030\300\001\002\000\022\034\016" +
    "\051\025\052\020\057\027\062\026\063\022\066\007\100" +
    "\006\001\002\000\004\014\uffd3\001\002\000\040\002\uffce" +
    "\005\uffce\007\uffce\012\uffce\014\uffce\034\uffce\051\uffce\052" +
    "\uffce\057\uffce\062\uffce\063\uffce\066\uffce\067\uffce\070\uffce" +
    "\100\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\042\002\007\003\032\004\030\005\004\006" +
    "\023\007\022\011\016\013\003\014\014\016\031\037\012" +
    "\040\013\041\011\042\010\043\020\044\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\004\006\023\007\022\011\016\013\003\014\014\016" +
    "\031\037\012\040\271\041\011\042\010\043\020\044\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\033\005\004\006\023\007" +
    "\022\011\016\013\003\014\014\016\031\037\012\040\013" +
    "\041\011\042\010\043\020\044\027\001\001\000\002\001" +
    "\001\000\052\015\072\017\077\020\055\024\045\025\102" +
    "\026\103\027\076\030\047\031\070\032\062\033\057\035" +
    "\050\036\075\045\074\046\213\047\100\050\053\051\064" +
    "\052\071\053\065\001\001\000\052\015\072\017\077\020" +
    "\055\024\045\025\102\026\103\027\076\030\047\031\070" +
    "\032\062\033\057\035\050\036\075\045\074\046\212\047" +
    "\100\050\053\051\064\052\071\053\065\001\001\000\052" +
    "\015\072\017\077\020\055\024\045\025\102\026\103\027" +
    "\076\030\047\031\070\032\062\033\057\035\050\036\075" +
    "\045\074\046\211\047\100\050\053\051\064\052\071\053" +
    "\065\001\001\000\052\015\072\017\077\020\055\024\045" +
    "\025\102\026\103\027\076\030\047\031\070\032\062\033" +
    "\057\035\050\036\075\045\074\046\210\047\100\050\053" +
    "\051\064\052\071\053\065\001\001\000\052\015\072\017" +
    "\077\020\055\024\045\025\102\026\103\027\076\030\047" +
    "\031\070\032\062\033\057\035\050\036\075\045\074\046" +
    "\205\047\100\050\053\051\064\052\071\053\065\001\001" +
    "\000\052\015\072\017\077\020\055\024\045\025\102\026" +
    "\103\027\076\030\047\031\070\032\062\033\057\035\050" +
    "\036\075\045\074\046\060\047\100\050\053\051\064\052" +
    "\071\053\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\015\072\017\077\020\055\024\045\025\102\026" +
    "\103\027\076\030\047\031\070\032\062\033\057\035\050" +
    "\036\075\051\177\052\071\053\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\141\010\156\053\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\004\006\023\007\022\011\016\013\003\014\014" +
    "\016\031\037\012\040\150\041\011\042\010\043\020\044" +
    "\027\001\001\000\002\001\001\000\010\007\141\010\143" +
    "\053\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\015\072\017\077\020\055\024\045\025" +
    "\102\026\103\027\076\030\047\031\070\032\062\033\057" +
    "\035\050\036\075\045\120\050\053\051\064\052\071\053" +
    "\065\001\001\000\046\015\072\017\077\020\055\024\045" +
    "\025\102\026\103\027\076\030\047\031\070\032\062\033" +
    "\057\035\050\036\075\045\111\050\053\051\064\052\071" +
    "\053\065\001\001\000\002\001\001\000\044\015\072\017" +
    "\077\020\055\024\045\025\102\026\103\027\076\030\047" +
    "\031\070\032\062\033\057\035\050\036\075\050\117\051" +
    "\064\052\071\053\065\001\001\000\044\015\072\017\077" +
    "\020\055\024\045\025\102\026\103\027\076\030\047\031" +
    "\070\032\062\033\057\035\050\036\075\050\116\051\064" +
    "\052\071\053\065\001\001\000\044\015\072\017\077\020" +
    "\055\024\045\025\102\026\103\027\076\030\047\031\070" +
    "\032\062\033\057\035\050\036\075\050\115\051\064\052" +
    "\071\053\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\004\006" +
    "\023\007\022\011\016\013\003\014\014\016\031\037\012" +
    "\040\122\041\011\042\010\043\020\044\027\001\001\000" +
    "\002\001\001\000\034\005\004\006\023\007\022\011\016" +
    "\013\003\014\014\016\031\037\012\040\124\041\011\042" +
    "\010\043\020\044\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\004\006\023\007\022\011\016\013" +
    "\003\014\014\016\031\037\012\040\127\041\011\042\010" +
    "\043\020\044\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\015\072\017\077\020\055\024\045\025\102" +
    "\026\103\027\076\030\047\031\070\032\062\033\057\035" +
    "\050\036\075\051\132\052\071\053\065\001\001\000\002" +
    "\001\001\000\034\005\004\006\023\007\022\011\016\013" +
    "\003\014\014\016\031\037\012\040\134\041\011\042\010" +
    "\043\020\044\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\004\006\023\007\022\011\016\013\003" +
    "\014\014\016\031\037\012\040\137\041\011\042\010\043" +
    "\020\044\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\072\017\077\020\055\024\045\025\102\026\103" +
    "\027\076\030\047\031\070\032\062\033\057\035\050\036" +
    "\075\045\155\050\053\051\064\052\071\053\065\001\001" +
    "\000\046\015\072\017\077\020\055\024\045\025\102\026" +
    "\103\027\076\030\047\031\070\032\062\033\057\035\050" +
    "\036\075\045\154\050\053\051\064\052\071\053\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\161\001\001\000\002\001" +
    "\001\000\004\007\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\141\010\166\053\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\004\006\023" +
    "\007\022\011\016\013\003\014\014\016\031\037\012\040" +
    "\171\041\011\042\010\043\020\044\027\001\001\000\002" +
    "\001\001\000\034\005\004\006\023\007\022\011\016\013" +
    "\003\014\014\016\031\037\012\040\173\041\011\042\010" +
    "\043\020\044\027\001\001\000\002\001\001\000\034\005" +
    "\004\006\023\007\022\011\016\013\003\014\014\016\031" +
    "\037\012\040\175\041\011\042\010\043\020\044\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\004\006" +
    "\023\007\022\011\016\013\003\014\014\016\031\037\012" +
    "\040\203\041\011\042\010\043\020\044\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\206\001\001" +
    "\000\052\015\072\017\077\020\055\024\045\025\102\026" +
    "\103\027\076\030\047\031\070\032\062\033\057\035\050" +
    "\036\075\045\074\046\207\047\100\050\053\051\064\052" +
    "\071\053\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\230\001\001\000\004\007\217\001\001\000\004" +
    "\007\224\001\001\000\002\001\001\000\010\007\141\010" +
    "\221\053\142\001\001\000\002\001\001\000\004\037\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\234\023\233\053\232\001\001\000" +
    "\002\001\001\000\006\022\244\053\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\004\006\023\007" +
    "\022\011\016\013\003\014\014\016\031\037\012\040\237" +
    "\041\011\042\010\043\020\044\027\001\001\000\002\001" +
    "\001\000\040\003\241\004\030\005\004\006\023\007\022" +
    "\011\016\013\003\014\014\016\031\037\012\040\013\041" +
    "\011\042\010\043\020\044\027\001\001\000\036\004\033" +
    "\005\004\006\023\007\022\011\016\013\003\014\014\016" +
    "\031\037\012\040\013\041\011\042\010\043\020\044\027" +
    "\001\001\000\004\023\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\246\053\243\001\001\000\002" +
    "\001\001\000\004\012\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\004\006\023" +
    "\007\022\011\016\013\003\014\014\016\031\037\012\040" +
    "\254\041\011\042\010\043\020\044\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\004\006\023\007" +
    "\022\011\016\013\003\014\014\016\031\037\012\040\257" +
    "\041\011\042\010\043\020\044\027\001\001\000\002\001" +
    "\001\000\004\012\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\265\043\020\044" +
    "\027\001\001\000\002\001\001\000\006\043\267\044\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\004\006\023\007\022\011\016\013\003" +
    "\014\014\016\031\037\012\040\273\041\011\042\010\043" +
    "\020\044\027\001\001\000\002\001\001\000\034\005\004" +
    "\006\023\007\022\011\016\013\003\014\014\016\031\037" +
    "\012\040\275\041\011\042\010\043\020\044\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\004\006" +
    "\023\007\022\011\016\013\003\014\014\016\031\037\012" +
    "\040\300\041\011\042\010\043\020\044\027\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		smplLexer lexer;

		public SMPLParser(smplLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // empty ::= 
            {
              Object RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("empty",41, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= builtIn 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=b;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= INTEGER 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("factor",40, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // power ::= factor POW power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpPow(p,f); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("power",39, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bitnot ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitnot",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bitnot ::= BNOT power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpBitNot(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitnot",38, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term ::= bitnot 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = b; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= term MOD bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= term DIV bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= term MUL bitnot 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, b); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arithexp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // arithexp ::= arithexp MINUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpSub(a, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arithexp ::= arithexp PLUS term 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpAdd(a, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("arithexp",37, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bitexp ::= arithexp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = a; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bitexp ::= bitexp BOR term 
            {
              Exp RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpBitOr(bi, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bitexp ::= bitexp BAND term 
            {
              Exp RESULT =null;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpBitAnd(bi, t); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bitexp",36, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relexp ::= relexp NOTEQUAL bitexp NT$0 bitexp 
            {
              Exp RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = bi; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$0 ::= 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

			RESULT = new ExpNotEqual(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relexp ::= relexp LESSEQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpLessEq(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relexp ::= relexp GREATEREQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpGreatEq(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relexp ::= relexp EQUAL bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpEqual(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relexp ::= relexp LESSTHAN bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpLess(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relexp ::= relexp GREATERTHAN bitexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int biright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp bi = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new ExpGreater(r, bi); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("relexp",34, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logicnot ::= relexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicnot",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logicnot ::= LNOT relexp 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicNot(r); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicnot",33, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // logicand ::= logicnot 
            {
              Exp RESULT =null;
		int lnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ln = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ln; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicand",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // logicand ::= logicand LAND logicnot 
            {
              Exp RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ln = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicAnd(la,ln); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicand",32, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // logicor ::= logicand 
            {
              Exp RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = la; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicor",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // logicor ::= logicor LOR logicand 
            {
              Exp RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp la = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new ExpLogicOr(lo,la); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("logicor",31, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= ifStmt 
            {
              Exp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp is = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = is; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= letStmt 
            {
              Exp RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp ls = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = ls; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= valStmt 
            {
              Exp RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp vs = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = vs; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= procDefn 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pd = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= definition SEMICOLON 
            {
              Exp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = d; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= println 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=p;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= print 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=p;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= logicor 
            {
              Exp RESULT =null;
		int loleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int loright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp lo = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = lo; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // definition ::= idList COLON ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList v = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // definition ::= VARIABLE COLON ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // definition ::= DEF VARIABLE ASSIGN expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procDefn ::= PROC idList valStmt 
            {
              Exp RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procDefn ::= PROC LPAREN idList PERIOD idListE RPAREN valStmt 
            {
              Exp RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // procDefn ::= PROC LPAREN LBRACE idList RBRACE RPAREN valStmt 
            {
              Exp RESULT =null;
		int parmsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int parmsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ArrayList parms = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new ExpProc(parms, body); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("procDefn",4, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // idList ::= VARIABLE 
            {
              ArrayList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // idList ::= VARIABLE COMMA idList 
            {
              ArrayList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idList",5, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // idListE ::= empty 
            {
              ArrayList RESULT =null;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // idListE ::= idList 
            {
              ArrayList RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;

              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("idListE",6, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bindingsAux ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",16, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bindings ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bindings ::= binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("bindings",15, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("binding",17, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // readint ::= READINT LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpReadInt();
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("readint",14, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // read ::= READ LPAREN RPAREN 
            {
              Exp RESULT =null;
		
		RESULT = new ExpRead();
	
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("read",13, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // println ::= PRINTLN LPAREN stmtExp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtPrintLn(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("println",10, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT LPAREN stmtExp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new StmtPrint(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("print",9, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ifStmt ::= IF expression THEN expression ELSE expression 
            {
              Exp RESULT =null;
		int ifExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int ifExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		Exp ifExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int thenExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int thenExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Exp thenExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp elseExp = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		 RESULT = new SmplIf(ifExp, thenExp, elseExp); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("ifStmt",12, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vector ::= LVECTOR idListE RVECTOR 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList id = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new ExpVector(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("vector",22, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lazy ::= LAZY LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
                 RESULT = new ExpLazy(e);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("lazy",21, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call ::= CALL LPAREN procDefn COMMA idList RPAREN 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList lst = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new ExpCall(f,lst);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("call",20, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpSubStr(e1, e2, e3);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("substr",11, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cdr ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpCdr(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("cdr",24, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // car ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpCar(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("car",25, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list ::= empty 
            {
              Exp RESULT =null;
		 RESULT = new ExpList(); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list ::= LBRACE idListE RBRACE 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList id = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpList(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list ::= LIST LPAREN idListE RPAREN 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ArrayList id = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpList(id); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("list",19, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pairCheck ::= PAIRCHECK LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
			RESULT = new ExpPairCheck(e); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairCheck",27, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pairStmt ::= pair LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		
		RESULT = new ExpPair(e1,e2);	
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("pairStmt",23, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // letStmt ::= LET LBRACE bindings RBRACE stmtList 
            {
              Exp RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ArrayList bs = (ArrayList)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("letStmt",7, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // builtIn ::= readint 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // builtIn ::= read 
            {
              Exp RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = r; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // builtIn ::= vector 
            {
              Exp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = v; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // builtIn ::= lazy 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // builtIn ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Statement c = (Statement)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // builtIn ::= substr 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // builtIn ::= list 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // builtIn ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // builtIn ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // builtIn ::= pairCheck 
            {
              Exp RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp pc = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT = pc; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // builtIn ::= pairStmt 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = p; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("builtIn",18, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		RESULT=e; 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SMPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.peek()), RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

